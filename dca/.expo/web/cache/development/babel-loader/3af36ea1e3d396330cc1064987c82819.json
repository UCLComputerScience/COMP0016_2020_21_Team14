{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\peris\\\\Desktop\\\\dca\\\\src\\\\screens\\\\Post.js\";\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Card, Title } from 'react-native-paper';\nimport HTML from 'react-native-render-html';\nimport { IGNORED_TAGS } from 'react-native-render-html/src/HTMLUtils';\nimport Axios from 'axios';\n\nvar Post = function Post(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      post = _React$useState2[0],\n      setPost = _React$useState2[1];\n\n  var id = route.params.id;\n  React.useEffect(function () {\n    Axios.get(\"http://arthurmurraydcp.com/wp-json/wp/v2/posts?&include=\" + id).then(function (response) {\n      setPost(response.data);\n    });\n  }, [setPost]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: post,\n    keyExtractor: function keyExtractor(item) {\n      return item.id.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(ScrollView, {\n        style: {\n          flex: 1,\n          backgroundColor: 'rgba(231, 207, 200, 0.9)'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }\n      }, React.createElement(HTML, {\n        ignoredTags: IGNORED_TAGS.filter(function (tag) {\n          return tag !== 'video';\n        }),\n        source: {\n          uri: post.content\n        },\n        renderers: {\n          video: function video(htmlAttribs, children, convertedCSSStyles, passProps) {\n            return React.createElement(View, {\n              key: passProps.key,\n              style: {\n                width: \"100%\",\n                aspectRatio: 16.0 / 9.0,\n                marginTop: 16,\n                marginBottom: 16\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 32\n              }\n            }, React.createElement(WebView, {\n              scrollEnabled: false,\n              mediaPlaybackRequiresUserAction: true,\n              allowsInlineMediaPlayback: true,\n              javaScriptEnabled: true,\n              scalesPageToFit: false,\n              allowsFullscreenVideo: true,\n              domStorageEnabled: true,\n              allowFileAccess: false,\n              source: {\n                html: \"\\n                                <video width=\\\"100%\\\" height=\\\"100%\\\" controls>\\n                                    <source src=\\\"\" + htmlAttribs.src + \"\\\" type=\\\"video/mp4\\\">\\n                                </video>\\n                                \"\n              },\n              style: {\n                flex: 1,\n                width: \"100%\",\n                aspectRatio: 16.0 / 9.0\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 29\n              }\n            }));\n          },\n          iframe: function iframe(htmlAttribs, children, convertedCSSStyles, passProps) {\n            return React.createElement(View, {\n              key: passProps.key,\n              style: {\n                width: \"100%\",\n                aspectRatio: 16.0 / 9.0,\n                marginTop: 16,\n                marginBottom: 16\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 32\n              }\n            }, React.createElement(WebView, {\n              scrollEnabled: false,\n              mediaPlaybackRequiresUserAction: true,\n              allowsInlineMediaPlayback: true,\n              javaScriptEnabled: true,\n              injectedJavaScript: INJECTEDJAVASCRIPT,\n              onMessage: function onMessage() {},\n              scalesPageToFit: false,\n              allowsFullscreenVideo: true,\n              domStorageEnabled: true,\n              allowFileAccess: false,\n              source: {\n                uri: htmlAttribs.src\n              },\n              style: {\n                flex: 1,\n                width: \"100%\",\n                aspectRatio: 16.0 / 9.0\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 29\n              }\n            }));\n          }\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Post;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  card: {\n    width: '90%',\n    alignSelf: 'center',\n    backgroundColor: '#FFFFFF',\n    marginVertical: 10\n  },\n  title: {\n    textAlign: 'center'\n  },\n  image: {\n    width: 420,\n    height: 90,\n    resizeMode: \"contain\"\n  }\n});","map":{"version":3,"sources":["C:/Users/peris/Desktop/dca/src/screens/Post.js"],"names":["React","Card","Title","HTML","IGNORED_TAGS","Axios","Post","route","navigation","useState","post","setPost","id","params","useEffect","get","then","response","data","styles","container","item","toString","flex","backgroundColor","filter","tag","uri","content","video","htmlAttribs","children","convertedCSSStyles","passProps","key","width","aspectRatio","marginTop","marginBottom","html","src","iframe","INJECTEDJAVASCRIPT","StyleSheet","create","card","alignSelf","marginVertical","title","textAlign","image","height","resizeMode"],"mappings":"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","sourcesContent":["// import React from 'react';\r\n// import { StyleSheet, Dimensions, FlatList, Text, View, ScrollView } from 'react-native';\r\n// import { Avatar, Button, Card, Title, Paragraph, List } from 'react-native-paper';\r\n// import { IGNORED_TAGS } from 'react-native-render-html/src/HTMLUtils';\r\n// import HTML from 'react-native-render-html';\r\n// import { WebView } from 'react-native-webview';\r\n\r\n// export default class Post extends React.Component {\r\n//     componentDidMount() {\r\n//         this.fetchPost();\r\n//     }\r\n    \r\n//     async fetchPost() {\r\n//         const post_id = 137;\r\n\r\n//         const response = await fetch(`http://arthurmurraydcp.com/wp-json/wp/v2/posts?_embed&include=${post_id}`);\r\n//         const post = await response.json();\r\n//         this.setState({ post: post, isLoading: false });\r\n//     }\r\n\r\n//     constructor(props) {\r\n//         super(props);\r\n        \r\n//         this.state = {\r\n//             post: [],\r\n//             isLoading: true\r\n//         };\r\n//     }\r\n\r\n//     render() {\r\n//         let post = this.state.post;\r\n//         const INJECTEDJAVASCRIPT = \r\n//             `const meta = document.createElement('meta');\r\n//             meta.setAttribute('content', 'width=device-width, initial-scale=0.5, maximum-scale=0.5, user-scalable=0');\r\n//             meta.setAttribute('name', 'viewport'); document.getElementsByTagName('head')[0].appendChild(meta);`\r\n//         ;\r\n        \r\n//         return (\r\n//             <View>\r\n//                 <FlatList\r\n//                     data = { this.state.post }\r\n//                     renderItem = {({ item }) => (\r\n//                     <Card style = {{backgroundColor: 'rgba(231, 207, 200, 0.9)'}}>\r\n//                         <Card.Content>\r\n//                             <Title style = {{alignSelf: 'center' }}> <HTML source={{html: item.title.rendered}}/></Title>\r\n//                             <Paragraph />\r\n//                         </Card.Content>\r\n//                         <Card.Content>\r\n//                             <HTML\r\n//                                 ignoredTags={IGNORED_TAGS.filter(tag => tag !== 'video')}\r\n//                                 source = {{html: item.content.rendered}}\r\n//                                 renderers={{\r\n//                                     video: (htmlAttribs, children, convertedCSSStyles, passProps) => {\r\n//                                         return <View key={passProps.key} style={{ width: \"100%\", aspectRatio:16.0/9.0, marginTop:16, marginBottom:16 }}>\r\n//                                             <WebView\r\n//                                                 scrollEnabled={false}\r\n//                                                 mediaPlaybackRequiresUserAction={true}\r\n//                                                 allowsInlineMediaPlayback={true}\r\n//                                                 javaScriptEnabled={true}\r\n//                                                 scalesPageToFit={false}\r\n//                                                 allowsFullscreenVideo={true}\r\n//                                                 domStorageEnabled={true}\r\n//                                                 allowFileAccess={false}\r\n//                                                 source = {{ html: `\r\n//                                                 <video width=\"100%\" height=\"100%\" controls>\r\n//                                                     <source src=\"${htmlAttribs.src}\" type=\"video/mp4\">\r\n//                                                 </video>\r\n//                                                 ` }}\r\n//                                                 style={{ flex: 1, width: \"100%\", aspectRatio: 16.0 / 9.0 }}\r\n//                                             />\r\n//                                         </View>\r\n//                                     },\r\n//                                     iframe: (htmlAttribs, children, convertedCSSStyles, passProps) => {\r\n//                                         return <View key={passProps.key} style={{ width: \"100%\", aspectRatio:16.0/9.0, marginTop:16, marginBottom:16 }}>\r\n//                                             <WebView\r\n//                                                 scrollEnabled={false}\r\n//                                                 mediaPlaybackRequiresUserAction={true}\r\n//                                                 allowsInlineMediaPlayback={true}\r\n//                                                 javaScriptEnabled={true}\r\n//                                                 injectedJavaScript={INJECTEDJAVASCRIPT}\r\n//                                                 onMessage={() => {}}\r\n//                                                 scalesPageToFit={false}\r\n//                                                 allowsFullscreenVideo={true}\r\n//                                                 domStorageEnabled={true}\r\n//                                                 allowFileAccess={false}\r\n//                                                 source={{ uri: htmlAttribs.src }}\r\n//                                                 style={{ flex: 1, width: \"100%\", aspectRatio: 16.0 / 9.0 }}\r\n//                                             />\r\n//                                         </View> \r\n//                                     }\r\n//                                 }}\r\n//                             />\r\n//                         </Card.Content>\r\n//                     </Card>\r\n//                     )}\r\n//                     keyExtractor = { (item, index) => index.toString() }\r\n//                 />\r\n//             </View>\r\n//         )\r\n//     }\r\n// }\r\n\r\nimport React from 'react';\r\nimport { View, ScrollView, Image, FlatList, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport { Card, Title } from 'react-native-paper';\r\nimport HTML from 'react-native-render-html';\r\nimport { IGNORED_TAGS } from 'react-native-render-html/src/HTMLUtils';\r\nimport Axios from 'axios';\r\n\r\nconst Post = ({route, navigation}) => {\r\n    const [post, setPost] = React.useState([]);\r\n\r\n    const {id} = route.params;\r\n    \r\n    React.useEffect(() => {\r\n        Axios.get(`http://arthurmurraydcp.com/wp-json/wp/v2/posts?&include=${id}`).then(response => {\r\n            setPost(response.data);\r\n        });\r\n    }, [setPost]);\r\n\r\n    return (\r\n        <View style = {styles.container}>\r\n            <FlatList\r\n                data = {post}\r\n                keyExtractor = {item => item.id.toString()}\r\n                // ListHeaderComponent = {\r\n                //     <Image\r\n                //         source = { require('../../assets/logo.png') }\r\n                //         style = {{ resizeMode: \"contain\", width: 420, height: 90}}\r\n                //     />\r\n                // }\r\n                renderItem = {({item}) => (\r\n                    <ScrollView style = {{flex:1, backgroundColor: 'rgba(231, 207, 200, 0.9)'}}>\r\n                        <HTML\r\n                ignoredTags={IGNORED_TAGS.filter(tag => tag !== 'video')}\r\n                source = {{uri: post.content}}\r\n                renderers={{\r\n                    video: (htmlAttribs, children, convertedCSSStyles, passProps) => {\r\n                        return <View key={passProps.key} style={{ width: \"100%\", aspectRatio:16.0/9.0, marginTop:16, marginBottom:16 }}>\r\n                            <WebView\r\n                                scrollEnabled={false}\r\n                                mediaPlaybackRequiresUserAction={true}\r\n                                allowsInlineMediaPlayback={true}\r\n                                javaScriptEnabled={true}\r\n                                scalesPageToFit={false}\r\n                                allowsFullscreenVideo={true}\r\n                                domStorageEnabled={true}\r\n                                allowFileAccess={false}\r\n                                source = {{ html: `\r\n                                <video width=\"100%\" height=\"100%\" controls>\r\n                                    <source src=\"${htmlAttribs.src}\" type=\"video/mp4\">\r\n                                </video>\r\n                                ` }}\r\n                                style={{ flex: 1, width: \"100%\", aspectRatio: 16.0 / 9.0 }}\r\n                            />\r\n                        </View>\r\n                    },\r\n                    iframe: (htmlAttribs, children, convertedCSSStyles, passProps) => {\r\n                        return <View key={passProps.key} style={{ width: \"100%\", aspectRatio:16.0/9.0, marginTop:16, marginBottom:16 }}>\r\n                            <WebView\r\n                                scrollEnabled={false}\r\n                                mediaPlaybackRequiresUserAction={true}\r\n                                allowsInlineMediaPlayback={true}\r\n                                javaScriptEnabled={true}\r\n                                injectedJavaScript={INJECTEDJAVASCRIPT}\r\n                                onMessage={() => {}}\r\n                                scalesPageToFit={false}\r\n                                allowsFullscreenVideo={true}\r\n                                domStorageEnabled={true}\r\n                                allowFileAccess={false}\r\n                                source={{ uri: htmlAttribs.src }}\r\n                                style={{ flex: 1, width: \"100%\", aspectRatio: 16.0 / 9.0 }}\r\n                            />\r\n                        </View> \r\n                    }\r\n                }}\r\n            />\r\n        </ScrollView>\r\n                    // <TouchableOpacity onPress = {() => {navigation.navigate(\"Post\", {id: item.id})}} activeOpacity = {0.9}>\r\n                    //     <Card style = {styles.card}>\r\n                    //         <Card.Content>\r\n                    //             <Title style = {styles.title}> <HTML source={{html: item.title.rendered}}/></Title>\r\n                    //         </Card.Content>\r\n                    //         <Card.Cover source = {{ uri: item.featured_media_src_url }}/>\r\n                    //     </Card>\r\n                    // </TouchableOpacity>\r\n                )}\r\n            />\r\n        </View>\r\n    );\r\n\r\n    // return (\r\n    //     <ScrollView style = {{flex:1, backgroundColor: 'rgba(231, 207, 200, 0.9)'}}>\r\n    //         <HTML\r\n    //             ignoredTags={IGNORED_TAGS.filter(tag => tag !== 'video')}\r\n    //             source = {{uri: post.content}}\r\n    //             renderers={{\r\n    //                 video: (htmlAttribs, children, convertedCSSStyles, passProps) => {\r\n    //                     return <View key={passProps.key} style={{ width: \"100%\", aspectRatio:16.0/9.0, marginTop:16, marginBottom:16 }}>\r\n    //                         <WebView\r\n    //                             scrollEnabled={false}\r\n    //                             mediaPlaybackRequiresUserAction={true}\r\n    //                             allowsInlineMediaPlayback={true}\r\n    //                             javaScriptEnabled={true}\r\n    //                             scalesPageToFit={false}\r\n    //                             allowsFullscreenVideo={true}\r\n    //                             domStorageEnabled={true}\r\n    //                             allowFileAccess={false}\r\n    //                             source = {{ html: `\r\n    //                             <video width=\"100%\" height=\"100%\" controls>\r\n    //                                 <source src=\"${htmlAttribs.src}\" type=\"video/mp4\">\r\n    //                             </video>\r\n    //                             ` }}\r\n    //                             style={{ flex: 1, width: \"100%\", aspectRatio: 16.0 / 9.0 }}\r\n    //                         />\r\n    //                     </View>\r\n    //                 },\r\n    //                 iframe: (htmlAttribs, children, convertedCSSStyles, passProps) => {\r\n    //                     return <View key={passProps.key} style={{ width: \"100%\", aspectRatio:16.0/9.0, marginTop:16, marginBottom:16 }}>\r\n    //                         <WebView\r\n    //                             scrollEnabled={false}\r\n    //                             mediaPlaybackRequiresUserAction={true}\r\n    //                             allowsInlineMediaPlayback={true}\r\n    //                             javaScriptEnabled={true}\r\n    //                             injectedJavaScript={INJECTEDJAVASCRIPT}\r\n    //                             onMessage={() => {}}\r\n    //                             scalesPageToFit={false}\r\n    //                             allowsFullscreenVideo={true}\r\n    //                             domStorageEnabled={true}\r\n    //                             allowFileAccess={false}\r\n    //                             source={{ uri: htmlAttribs.src }}\r\n    //                             style={{ flex: 1, width: \"100%\", aspectRatio: 16.0 / 9.0 }}\r\n    //                         />\r\n    //                     </View> \r\n    //                 }\r\n    //             }}\r\n    //         />\r\n    //     </ScrollView>\r\n    // );\r\n}\r\n\r\nexport default Post;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1\r\n    },\r\n    card: {\r\n        width: '90%',\r\n        alignSelf: 'center',\r\n        backgroundColor: '#FFFFFF',\r\n        marginVertical: 10\r\n    },\r\n    title: {\r\n        textAlign: 'center'\r\n    },\r\n    image: {\r\n        width: 420, height: 90,\r\n        resizeMode: \"contain\"\r\n    }\r\n});\r\n\r\n// // import React from 'react';\r\n// // import { StyleSheet, Dimensions, FlatList, Text, View, ScrollView } from 'react-native';\r\n// // import { Avatar, Button, Card, Title, Paragraph, List } from 'react-native-paper';\r\n// // import { IGNORED_TAGS } from 'react-native-render-html/src/HTMLUtils';\r\n// // import HTML from 'react-native-render-html';\r\n// // import { WebView } from 'react-native-webview';\r\n\r\n// // export default class Post extends React.Component {\r\n// //     componentDidMount() {\r\n// //         this.fetchPost();\r\n// //     }\r\n    \r\n// //     async fetchPost() {\r\n// //         const post_id = this.props.route.params?.post_id;\r\n\r\n// //         const response = await fetch(`http://arthurmurraydcp.com/wp-json/wp/v2/posts?&include=${post_id}`);\r\n// //         const post = await response.json();\r\n// //         console.log(post);\r\n// //         this.setState({ post: post, isLoading: false });\r\n// //     }\r\n\r\n// //     constructor(props) {\r\n// //         super(props);\r\n        \r\n// //         this.state = {\r\n// //             post: [],\r\n// //             isLoading: true\r\n// //         };\r\n// //     }\r\n\r\n// //     render() {\r\n// //         const INJECTEDJAVASCRIPT = \r\n// //             `const meta = document.createElement('meta');\r\n// //             meta.setAttribute('content', 'width=device-width, initial-scale=0.5, maximum-scale=0.5, user-scalable=0');\r\n// //             meta.setAttribute('name', 'viewport'); document.getElementsByTagName('head')[0].appendChild(meta);`\r\n// //         ;\r\n        \r\n// //         return (\r\n// //             <ScrollView style = {{flex:1, backgroundColor: 'rgba(231, 207, 200, 0.9)'}}>\r\n// //                 <HTML\r\n// //                     ignoredTags={IGNORED_TAGS.filter(tag => tag !== 'video')}\r\n// //                     source = {{uri: this.state.post.content}}\r\n// //                     renderers={{\r\n// //                         video: (htmlAttribs, children, convertedCSSStyles, passProps) => {\r\n// //                             return <View key={passProps.key} style={{ width: \"100%\", aspectRatio:16.0/9.0, marginTop:16, marginBottom:16 }}>\r\n// //                                 <WebView\r\n// //                                     scrollEnabled={false}\r\n// //                                     mediaPlaybackRequiresUserAction={true}\r\n// //                                     allowsInlineMediaPlayback={true}\r\n// //                                     javaScriptEnabled={true}\r\n// //                                     scalesPageToFit={false}\r\n// //                                     allowsFullscreenVideo={true}\r\n// //                                     domStorageEnabled={true}\r\n// //                                     allowFileAccess={false}\r\n// //                                     source = {{ html: `\r\n// //                                     <video width=\"100%\" height=\"100%\" controls>\r\n// //                                         <source src=\"${htmlAttribs.src}\" type=\"video/mp4\">\r\n// //                                     </video>\r\n// //                                     ` }}\r\n// //                                     style={{ flex: 1, width: \"100%\", aspectRatio: 16.0 / 9.0 }}\r\n// //                                 />\r\n// //                             </View>\r\n// //                         },\r\n// //                         iframe: (htmlAttribs, children, convertedCSSStyles, passProps) => {\r\n// //                             return <View key={passProps.key} style={{ width: \"100%\", aspectRatio:16.0/9.0, marginTop:16, marginBottom:16 }}>\r\n// //                                 <WebView\r\n// //                                     scrollEnabled={false}\r\n// //                                     mediaPlaybackRequiresUserAction={true}\r\n// //                                     allowsInlineMediaPlayback={true}\r\n// //                                     javaScriptEnabled={true}\r\n// //                                     injectedJavaScript={INJECTEDJAVASCRIPT}\r\n// //                                     onMessage={() => {}}\r\n// //                                     scalesPageToFit={false}\r\n// //                                     allowsFullscreenVideo={true}\r\n// //                                     domStorageEnabled={true}\r\n// //                                     allowFileAccess={false}\r\n// //                                     source={{ uri: htmlAttribs.src }}\r\n// //                                     style={{ flex: 1, width: \"100%\", aspectRatio: 16.0 / 9.0 }}\r\n// //                                 />\r\n// //                             </View> \r\n// //                         }\r\n// //                     }}\r\n// //                 />\r\n// //             </ScrollView>\r\n// //         )\r\n// //     }\r\n// // }\r\n\r\n// // // import React from 'react';\r\n// // // import { StyleSheet, Image, Text, View } from 'react-native';\r\n// // // import { FlatList } from 'react-native-gesture-handler';\r\n\r\n// // // const Post = () => {\r\n// // //     const [post, setPost] = React.useState([]);\r\n// // //     React.useEffect(() => {\r\n// // //         async function loadPost() {\r\n// // //             const response = await fetch(`http://arthurmurraydcp.com/wp-json/wp/v2/posts?_embed&include=${post_id}`);\r\n// // //             const post = await response.json();\r\n// // //             setPost(post);\r\n// // //         }\r\n\r\n// // //         loadPost();\r\n// // //     }, []);\r\n\r\n// // //     return (\r\n// // //         <View style = {styles.container}>\r\n// // //             <FlatList\r\n// // //                 data = {data}\r\n// // //                 keyExtractor = {item => item.id.toString()}\r\n// // //                 renderItem = {({item}) => (\r\n// // //                     <TouchableOpacity onPress = {() => {navigation.navigate(\"Post\")}} activeOpacity = {0.9}>\r\n// // //                         <Card style = {styles.card}>\r\n// // //                             <Card.Content>\r\n// // //                                 <Title style = {styles.title}> <HTML source={{html: item.title.rendered}}/></Title>\r\n// // //                             </Card.Content>\r\n// // //                             <Card.Cover source = {{ uri: item.featured_media_src_url }}/>\r\n// // //                         </Card>\r\n// // //                     </TouchableOpacity>\r\n// // //                 )}\r\n// // //             />\r\n// // //         </View>\r\n// // //     )\r\n// // // }\r\n\r\n// // // export default Post;\r\n\r\n// // // const styles = StyleSheet.create({\r\n// // //     container: {\r\n// // //         flex: 1\r\n// // //     },\r\n// // //     card: {\r\n// // //         width: '90%',\r\n// // //         alignSelf: 'center',\r\n// // //         backgroundColor: '#FFFFFF',\r\n// // //         marginVertical: 10\r\n// // //     },\r\n// // //     title: {\r\n// // //         textAlign: 'center'\r\n// // //     },\r\n// // //     image: {\r\n// // //         width: 420, height: 90,\r\n// // //         resizeMode: \"contain\"\r\n// // //     }\r\n// // // });\r\n"]},"metadata":{},"sourceType":"module"}